.Dd December 11, 2013
.Dt libbde 3
.Os libbde
.Sh NAME
.Nm libbde.h
.Nd Library to access the BitLocker Drive Encryption (BDE) format
.Sh LIBRARY
.Lb libbde
.Sh SYNOPSIS
.In libbde.h
.Pp
Support functions
.Ft const char *
.Fn libbde_get_version "void"
.Ft int
.Fn libbde_get_access_flags_read
.Ft int
.Fn libbde_get_codepage "int *codepage, libbde_error_t **error"
.Ft int
.Fn libbde_set_codepage "int codepage, libbde_error_t **error"
.Ft int
.Fn libbde_check_file_signature "const char *filename, libbde_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libbde_check_file_signature_wide "const wchar_t *filename, libbde_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libbde_check_file_signature_file_io_handle "libbfio_handle_t *file_io_handle, libbde_error_t **error"
.Pp
Notify functions
.Ft void
.Fn libbde_notify_set_verbose "int verbose"
.Ft int
.Fn libbde_notify_set_stream "FILE *stream, libbde_error_t **error"
.Ft int
.Fn libbde_notify_stream_open "const char *filename, libbde_error_t **error"
.Ft int
.Fn libbde_notify_stream_close "libbde_error_t **error"
.Pp
Error functions
.Ft void 
.Fn libbde_error_free "libbde_error_t **error"
.Ft int
.Fn libbde_error_fprint "libbde_error_t *error, FILE *stream"
.Ft int
.Fn libbde_error_sprint "libbde_error_t *error, char *string, size_t size"
.Ft int 
.Fn libbde_error_backtrace_fprint "libbde_error_t *error, FILE *stream"
.Ft int
.Fn libbde_error_backtrace_sprint "libbde_error_t *error, char *string, size_t size"
.Pp
Volume functions
.Ft int
.Fn libbde_volume_initialize "libbde_volume_t **volume, libbde_error_t **error"
.Ft int
.Fn libbde_volume_free "libbde_volume_t **volume, libbde_error_t **error"
.Ft int
.Fn libbde_volume_signal_abort "libbde_volume_t **volume, libbde_error_t **error"
.Ft int
.Fn libbde_volume_open "libbde_volume_t *volume, const char *filename, int flags, libbde_error_t **error"
.Ft int
.Fn libbde_volume_close "libbde_volume_t *volume, libbde_error_t **error"
.Ft ssize_t
.Fn libbde_volume_read_buffer "libbde_volume_t *volume, void *buffer, size_t buffer_size, libbde_error_t **error"
.Ft ssize_t
.Fn libbde_volume_read_random "libbde_volume_t *volume, void *buffer, size_t buffer_size, off64_t offset, libbde_error_t **error"
.Ft off64_t
.Fn libbde_volume_seek_offset "libbde_volume_t *volume, off64_t offset, int whence, libbde_error_t **error"
.Ft int
.Fn libbde_volume_get_offset "libbde_volume_t *volume, off64_t *offset, libbde_error_t **error"
.Ft int
.Fn libbde_volume_get_size "libbde_volume_t *volume, size64_t *size, libbde_error_t **error"
.Ft int
.Fn libbde_volume_get_encryption_method "libbde_volume_t *volume, uint32_t *encryption_method, libbde_error_t **error"
.Ft int
.Fn libbde_volume_get_volume_identifier "libbde_volume_t *volume, uint8_t *volume_identifier, size_t size, libbde_error_t **error"
.Ft int
.Fn libbde_volume_get_creation_time "libbde_volume_t *volume, uint64_t *filetime, libbde_error_t **error"
.Ft int
.Fn libbde_volume_set_keys "libbde_volume_t *volume, const uint8_t *full_volume_encryption_key, size_t full_volume_encryption_key_size, const uint8_t *tweak_key, size_t tweak_key_size, libbde_error_t **error"
.Ft int
.Fn libbde_volume_set_utf8_password "libbde_volume_t *volume, const uint8_t *utf8_string, size_t utf8_string_length, libbde_error_t **error"
.Ft int
.Fn libbde_volume_set_utf16_password "libbde_volume_t *volume, const uint16_t *utf16_string, size_t utf16_string_length, libbde_error_t **error"
.Ft int
.Fn libbde_volume_set_utf8_recovery_password "libbde_volume_t *volume, const uint8_t *utf8_string, size_t utf8_string_length, libbde_error_t **error"
.Ft int
.Fn libbde_volume_set_utf16_recovery_password "libbde_volume_t *volume, const uint16_t *utf16_string, size_t utf16_string_length, libbde_error_t **error"
.Ft int
.Fn libbde_volume_read_startyp_key "libbde_volume_t *volume, const char *filename, libbde_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libbde_volume_open_wide "libbde_volume_t *volume, const wchar_t *filename, int flags, libbde_error_t **error"
.Ft int
.Fn libbde_volume_read_startup_key_wide "libbde_volume_t *volume, const wchar_t *filename, libbde_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libbde_volume_open_file_io_handle "libbde_volume_t *volume, libbfio_handle_t *file_io_handle, int flags, libbde_error_t **error"
.Ft int
.Fn libbde_volume_read_startup_key_file_io_handle "libbde_volume_t *volume, libbfio_handle_t *file_io_handle, libbde_error_t **error"
.Sh DESCRIPTION
The
.Fn libbde_get_version
function is used to retrieve the library version.
.Sh RETURN VALUES
Most of the functions return NULL or -1 on error, dependent on the return type. For the actual return values refer to libbde.h
.Sh ENVIRONMENT
None
.Sh FILES
None
.Sh NOTES
libbde supports both UTF-8 and UTF-16 encoded strings except for filenames.
Some platforms like WINAPI require wide character support for Unicode filenames.
To compile libbde with wide character support use
.Ar ./configure --enable-wide-character-type=yes
or pass the definition
.Ar _UNICODE
 or
.Ar UNICODE
 to the compiler (i.e. in case of Microsoft Visual Studio (MSVS) C++).

To have other code to determine if libbde was compiled with wide character support it defines
.Ar LIBBDE_HAVE_WIDE_CHARACTER_TYPE
 in libbde/features.h.

libbde allows to be compiled with chained IO support using libbfio.
libbde will automatically detect if a compatible version of libbfio is available.

To have other code to determine if libbde was compiled with libbfio support it defines
.Ar LIBBDE_HAVE_BFIO
 in libbde/features.h.

.Sh BUGS
Please report bugs of any kind to <joachim.metz@gmail.com> or on the project website:
http://code.google.com/p/libbde/
.Sh AUTHOR
These man pages were written by Joachim Metz.
.Sh COPYRIGHT
Copyright 2011-2013, Joachim Metz <joachim.metz@gmail.com>.
This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.Sh SEE ALSO
the libbde.h include file
