/*
 * Type definitions for libbde
 *
 * Copyright (C) 2011-2012, Google Inc.
 *
 * Refer to AUTHORS for acknowledgements.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#if !defined( _LIBBDE_TYPES_H )
#define _LIBBDE_TYPES_H

#include <libbde/features.h>

/* Microsoft C/C++ compiler
 */
#if defined( _MSC_VER )

/* Define _LIBBDE_TYPES_H_INTEGERS to avoid conflict
 */
#if !defined( _LIBBDE_TYPES_H_INTEGERS )
#define _LIBBDE_TYPES_H_INTEGERS

#ifdef __cplusplus
extern "C" {
#endif

/* The Microsoft Visual Studio C++ compiler does not have <inttypes.h> or <stdint.h>
 * therefore it does not support the (u)int#_t type definitions
 * it has __int# defintions instead
 */
typedef __int8			int8_t;
typedef unsigned __int8		uint8_t;
typedef __int16			int16_t;
typedef unsigned __int16	uint16_t;
typedef __int32			int32_t;
typedef unsigned __int32	uint32_t;
typedef __int64			int64_t;
typedef unsigned __int64	uint64_t;

#if defined( _WIN64 )
typedef __int64			ssize_t;
#else
typedef __int32			ssize_t;
#endif

#ifdef __cplusplus
}
#endif

#endif /* !defined( _LIBBDE_TYPES_H_INTEGERS ) */

/* Borland C/C++ compiler
 */
#elif defined( __BORLANDC__ )
#if __BORLANDC__ <= 0x0560

/* Define _LIBBDE_TYPES_H_INTEGERS to avoid conflict
 */
#if !defined( _LIBBDE_TYPES_H_INTEGERS )
#define _LIBBDE_TYPES_H_INTEGERS

#ifdef __cplusplus
extern "C" {
#endif

/* Earlier versions of the Borland C++ Builder compiler
 * do not have <stdint.h> therefore they do not support
 * the (u)int#_t type definitions they have __int# defintions instead
 */
typedef __int8			int8_t;
typedef unsigned __int8		uint8_t;
typedef __int16			int16_t;
typedef unsigned __int16	uint16_t;
typedef __int32			int32_t;
typedef unsigned __int32	uint32_t;
typedef __int64			int64_t;
typedef unsigned __int64	uint64_t;

#if defined( _WIN64 )
typedef __int64			ssize_t;
typedef unsigned __int64	intptr_t;
#else
typedef __int32			ssize_t;
typedef unsigned __int32	intptr_t;
#endif

#ifdef __cplusplus
}
#endif

#endif /* !defined( _LIBBDE_TYPES_H_INTEGERS ) */

#else
#include <stdint.h>
#endif /* __BORLANDC__ <= 0x0560 */

/* Other compilers
 */
#else

#if @HAVE_SYS_TYPES_H@ || defined( HAVE_SYS_TYPES_H )
#include <sys/types.h>

#else
#error Missing system type definitions (sys/types.h)
#endif

/* Type definitions for compilers that have access to
 * <inttypes.h> or <stdint.h>
 */
#if @HAVE_INTTYPES_H@ || defined( HAVE_INTTYPES_H )
#include <inttypes.h>

#elif @HAVE_STDINT_H@ || defined( HAVE_STDINT_H )
#include <stdint.h>

#else
#error Missing integer type definitions (inttypes.h, stdint.h)
#endif

#endif /* Compiler specific integer type definitions */

#if defined( LIBBDE_HAVE_WIDE_CHARACTER_TYPE )

#if defined( _MSC_VER ) || defined( __MINGW32_VERSION )
#include <wchar.h>

#elif defined( __BORLANDC__ )
#if __BORLANDC__ <= 0x0520
#include <string.h>

#else
#include <wchar.h>
#endif /* __BORLANDC__ <= 0x0520 */

#elif @HAVE_WCHAR_H@ || defined( HAVE_WCHAR_H )

/* __USE_UNIX98 is required to add swprintf definition
 */
#if !defined( __USE_UNIX98 )
#define __USE_UNIX98
#define LIBBDE_DEFINITION_UNIX98
#endif

/* __USE_ISOC99 is required to add wcstoll and wcstuoll definition
 */
#if !defined( __USE_ISOC99 )
#define __USE_ISOC99
#define LIBBDE_DEFINITION_ISOC99
#endif

#include <wchar.h>

#if defined( LIBBDE_DEFINITION_UNIX98 )
#undef __USE_UNIX98
#undef LIBBDE_DEFINITION_UNIX98
#endif

#if defined( LIBBDE_DEFINITION_ISOC99 )
#undef __USE_ISOC99
#undef LIBBDE_DEFINITION_ISOC99
#endif

#endif

#endif

#ifdef __cplusplus
extern "C" {
#endif

#if ! @HAVE_SIZE32_T@ || ! HAVE_SIZE32_T
typedef uint32_t size32_t;
#endif

#if ! @HAVE_SSIZE32_T@ || ! HAVE_SSIZE32_T
typedef int32_t ssize32_t;
#endif

#if ! @HAVE_SIZE64_T@ || ! HAVE_SIZE64_T
typedef uint64_t size64_t;
#endif

#if ! @HAVE_SSIZE64_T@ || ! HAVE_SSIZE64_T
typedef int64_t ssize64_t;
#endif

#if ! @HAVE_OFF64_T@ || ! HAVE_OFF64_T
typedef int64_t off64_t;
#endif

/* The following type definitions hide internal data structures
 */
typedef intptr_t libbde_store_t;
typedef intptr_t libbde_volume_t;

#ifdef __cplusplus
}
#endif

#endif

